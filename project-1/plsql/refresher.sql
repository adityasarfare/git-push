--SQL FUNCTIONS
SELECT ROUND(123.456,1) FROM DUAL;
SELECT ROUND(123.436,1) FROM DUAL;
SELECT ROUND(123.436,0) FROM DUAL;
SELECT ROUND(123.536,0) FROM DUAL;
SELECT ROUND(123.536,-1) FROM DUAL;
SELECT ROUND(127.536,-1) FROM DUAL;
-- GROUP BY
SELECT * FROM EMPLOYEES;
SELECT DEPARTMENT_ID, SUM(SALARY) FROM EMPLOYEES
GROUP BY (DEPARTMENT_ID)

--WILDCARDS--  _ any one charcter, 0 or many characters 
SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE '_e%'
--BETWEEN AND NOT BETWEEN--
SELECT * FROM EMPLOYEES;
SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES
WHERE EMPLOYEE_ID BETWEEN 100 AND 105;
--Transaction Control Language(TCL)--
COMMIT;
ROLLBACK;

SELECT * FROM USER_TABLE;
--UNDO CHANGES
ROLLBACK;
INSERT INTO USER_TABLE VALUES(5, 'TEST', 500);
COMMIT;
INSERT INTO USER_TABLE (USER_NAME, USER_SALARY) VALUES('TEST','TESTVAL');
-- SAVEPOINT
INSERT INTO USER_TABLE VALUES(8, 'TEST', 500);
SAVEPOINT SP1;
INSERT INTO USER_TABLE VALUES(9, 'TEST', 500);
SAVEPOINT SP2;
ROLLBACK TO SAVEPOINT SP2;
SELECT * FROM USER_TABLE;
COMMIT;
DELETE FROM USER_TABLE;

-- SELECT QUERIES --
SELECT * FROM EMPLOYEES;
SELECT DISTINCT JOB_ID FROM EMPLOYEES;
SELECT  JOB_ID FROM EMPLOYEES WHERE JOB_ID ='AD_VP';

--DDL STATEMENT CREATE, ALTER, DROP 
--QUERY - DDL
--DML INSERT, UPDATE, DELETE
--ANONYMOUS BLOCKS --
--MANDATORY 
-- PL/SQL ALLOWS YOU TO CREATE PROCEDURES, FUNCTIONS, CURSORS, TRIGGERS, PACKAGES.
-- PL/SQL has its own datatype and are superset of database types.
-- HOST VARIABLES VS PL/SQL VARIABLES
VARIABLE TESTVAR CHAR(10);
BEGIN
END;
-- NESTED BLOCKS
BEGIN
    DECLARE
        NUM NUMBER;
    BEGIN
        NUM = 1;
    END;
    NUM :=2;
END;
/


-- CONSTANTS
SET SERVEROUTPUT ON;
DECLARE
    MESSAGE CONSTANT CHAR(200) := 'THE DISTANCE BETWEEN YOUR DREAM AND YOUR REALITY IS YOUR ACTIONS.';
BEGIN
    DBMS_OUTPUT.PUT_LINE(MESSAGE);
    MESSAGE := 'SONU NOT HAPPY';
END;

--RAISE YOUR OWN ERRORS IN PL/SQL
DECLARE
Balance integer := 24;
    BEGIN
    IF (Balance <= 100) THEN
    Raise_Application_Error (-20343, 'The balance is too low.');
    END IF;
END;


--EXCEPTIONS IN A PL/SQL ENVIRONMENT
SELECT FIRST_NAME INTO VFIRST_NAME FROM EMPLOYEES WHERE 1= 2; -- NO_DATA_FOUND
SELECT FIRST_NAME INTO VFIRST_NAME FROM EMPLOYEES ; -- TOO_MANY_ROWS

-- HANDLING MULTIPLE EXCEPTIONS
BEGIN
WHEN excetption1 THEN statements
WHEN excetption2 or excetption3 THEN statements
WHEN OTHERS THEN statements
END;
--PREDEFINED ORACLE PACKAGES
DBMS_OUTPUT - PACKAGE
DBMS_SQL - allows creation of dynamic sql queries
PUT_LINE - METHOD

--CURSORS--
-- CURSOR FOR LOOP
-- THE CURSOR IS IMPLICITLY OPENED AND CLOSED.
BEGIN
    FOR CUR_RECORD IN (select FIRST_NAME, LAST_NAME from employees)
    LOOP
        DBMS_OUTPUT.PUT_LINE (CUR_RECORD.FIRST_NAME || ' ' || CUR_RECORD.LAST_NAME);
    END LOOP;
END;

--TRIGGERS
DROP TABLE TEST;
CREATE TABLE TEST(TESTID CHAR(10), TESTNAME CHAR(20));
INSERT INTO TEST VALUES('T1', 'TN1');
INSERT INTO TEST VALUES('T2', 'TN2');
INSERT INTO TEST VALUES('T3', 'TN3');
COMMIT;

DROP TRIGGER TRGTEST;

CREATE OR REPLACE TRIGGER TRGTEST
--AFTER UPDATE OF TESTNAME
AFTER UPDATE 
ON TEST
FOR EACH ROW
BEGIN
INSERT INTO UPDATEMSG VALUES ('UPDATED');
END;

SELECT * FROM TEST;
--UPDATE TEST SET TESTNAME = 'TN11' WHERE TESTID = 'T1';
UPDATE TEST SET TESTNAME = 'TNALL';
UPDATE TEST SET TESTID = 'TN1';
COMMIT;

CREATE TABLE UPDATEMSG ( MESSAGE CHAR(50));
SELECT * FROM UPDATEMSG;
DELETE FROM UPDATEMSG;

